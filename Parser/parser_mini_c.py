# Um parser que recebe a lista de tokens e tipos e retorna a árvore sintática
pilha = []
saida = []

def vazia(pilha):
    return pilha == []

def empilhar(pilha, item):
    return pilha.append(item)

def topo(pilha):
    return pilha[-1]

def tamanho(pilha):
    return len(pilha)

def posicao(pilha, item):
    indice = len(pilha) - 1 - pilha[::-1].index(item)
    return indice

def terminal(item):
    if item in tokens_struct:
        return True
    
# tokens = [['var1', 'identifier'], ['123', 'number'], ['1234', 'int'], ['12.34', 'float'], 
#          ['if', 'if'], ['else', 'else'], ['for', 'for'], ['while', 'while'], [',', ','], 
#          ['.', '.'], [';', ';'], ['{', '{'], ['}', '}'], ['(', '('], [')', ')'], 
#          ['=', '='], ['==', '=='], ['<', '<'], ['>', '>'], ['<=', '<='], ['>=', '>='], 
#          ['!=', '!='], ['-', '-'], ['+', '+'], ['*', '*'], ['/', '/'], '$']

input = open("scanner/result.text", "r")
tokens_line = input.read().split('\n')
tokens = []
for token_line in tokens_line:
    tokens.append(token_line.split())

print("Tokens: ", tokens)

simbolos = {
    "Function" : 0,
    "ArgList" : 1,
    "Arg" : 2,
    "Declaration" : 3,
    "Type" : 4,
    "IdentList" : 5,
    "Stmt" : 6,
    "ForStmt" : 7,
    "OptExpr" : 8,
    "whileStmt" : 9,
    "IfStmt" : 10,
    "ElsePart" : 11,
    "CompoundStmt" : 12,
    "StmtList" : 13,
    "Expr" : 14,
    "Rvalue" : 15,
    "Compare" : 16,
    "Mag" : 17,
    "Mag'": 18,
    "Term" : 19,
    "Term'": 20,
    "Factor" :21
}

tokens_struct = {
    'identifier': 0,
    'number': 1,
    'int': 2,
    'float': 3,
    'if': 4,
    'else': 5,
    'for': 6,
    'while': 7,
    ',': 8,
    '.': 9,
    ';': 10,
    '{': 11,
    '}': 12,
    '(': 13,
    ')': 14,
    '=': 15,
    '==': 16,
    '<': 17,
    '>': 18,
    '<=': 19,
    '>=': 20,
    '!=': 21,
    '-': 22,
    '+': 23,
    '*': 24,
    '/': 25
}

regras_struct = {
    0: {
        0: '', 1: '', 2: 'Type identifier ( ArgList ) CompoundStmt', 3: 'Type identifier ( ArgList ) CompoundStmt', 4: '', 5: '', 6: '', 7: '', 8: '', 9: '', 10: '', 11: '', 12: '',
         13: '', 14: '', 15: '', 16: '', 17: '', 18: '', 19: '', 20: '', 21: '', 22: '', 23: '', 24: '', 25: ''
    },
    1: {
        0: '', 1: '', 2: '', 3: '', 4: '', 5: '', 6: '', 7: '', 8: '', 9: '', 10: '', 11: '', 12: '',
        13: '', 14: '', 15: '', 16: '', 17: '', 18: '', 19: '', 20: '', 21: '', 22: '', 23: '', 24: '', 25: ''
    },
    2: {
        0: '', 1: '', 2: '', 3: '', 4: '', 5: '', 6: '', 7: '', 8: '', 9: '', 10: '', 11: '', 12: '',
        13: '', 14: '', 15: '', 16: '', 17: '', 18: '', 19: '', 20: '', 21: '', 22: '', 23: '', 24: '', 25: ''
    },
    3: {
        0: '', 1: '', 2: '', 3: '', 4: '', 5: '', 6: '', 7: '', 8: '', 9: '', 10: '', 11: '', 12: '',
        13: '', 14: '', 15: '', 16: '', 17: '', 18: '', 19: '', 20: '', 21: '', 22: '', 23: '', 24: '', 25: ''
    },
    4: {
        0: '', 1: '', 2: 'int', 3: 'float', 4: '', 5: '', 6: '', 7: '', 8: '', 9: '', 10: '', 11: '', 12: '',
        13: '', 14: '', 15: '', 16: '', 17: '', 18: '', 19: '', 20: '', 21: '', 22: '', 23: '', 24: '', 25: ''
    },
    5: {
        0: '', 1: '', 2: '', 3: '', 4: '', 5: '', 6: '', 7: '', 8: '', 9: '', 10: '', 11: '', 12: '',
        13: '', 14: '', 15: '', 16: '', 17: '', 18: '', 19: '', 20: '', 21: '', 22: '', 23: '', 24: '', 25: ''
    },
    6: {
        0: '', 1: '', 2: '', 3: '', 4: '', 5: '', 6: '', 7: '', 8: '', 9: '', 10: '', 11: '', 12: '',
        13: '', 14: '', 15: '', 16: '', 17: '', 18: '', 19: '', 20: '', 21: '', 22: '', 23: '', 24: '', 25: ''
    },
    7: {
        0: '', 1: '', 2: '', 3: '', 4: '', 5: '', 6: '', 7: '', 8: '', 9: '', 10: '', 11: '', 12: '',
        13: '', 14: '', 15: '', 16: '', 17: '', 18: '', 19: '', 20: '', 21: '', 22: '', 23: '', 24: '', 25: ''
    },
    8: {
        0: '', 1: '', 2: '', 3: '', 4: '', 5: '', 6: '', 7: '', 8: '', 9: '', 10: '', 11: '', 12: '',
        13: '', 14: '', 15: '', 16: '', 17: '', 18: '', 19: '', 20: '', 21: '', 22: '', 23: '', 24: '', 25: ''
    },
    9: {
        0: '', 1: '', 2: '', 3: '', 4: '', 5: '', 6: '', 7: '', 8: '', 9: '', 10: '', 11: '', 12: '',
        13: '', 14: '', 15: '', 16: '', 17: '', 18: '', 19: '', 20: '', 21: '', 22: '', 23: '', 24: '', 25: ''
    },
    10: {
        0: '', 1: '', 2: '', 3: '', 4: '', 5: '', 6: '', 7: '', 8: '', 9: '', 10: '', 11: '', 12: '',
        13: '', 14: '', 15: '', 16: '', 17: '', 18: '', 19: '', 20: '', 21: '', 22: '', 23: '', 24: '', 25: ''
    },
    11: {
        0: '', 1: '', 2: '', 3: '', 4: '', 5: '', 6: '', 7: '', 8: '', 9: '', 10: '', 11: '', 12: '',
        13: '', 14: '', 15: '', 16: '', 17: '', 18: '', 19: '', 20: '', 21: '', 22: '', 23: '', 24: '', 25: ''
    },
    12: {
        0: '', 1: '', 2: '', 3: '', 4: '', 5: '', 6: '', 7: '', 8: '', 9: '', 10: '', 11: '', 12: '',
        13: '', 14: '', 15: '', 16: '', 17: '', 18: '', 19: '', 20: '', 21: '', 22: '', 23: '', 24: '', 25: ''
    },
    13: {
        0: '', 1: '', 2: '', 3: '', 4: '', 5: '', 6: '', 7: '', 8: '', 9: '', 10: '', 11: '', 12: '',
        13: '', 14: '', 15: '', 16: '', 17: '', 18: '', 19: '', 20: '', 21: '', 22: '', 23: '', 24: '', 25: ''
    },
    14: {
        0: '', 1: '', 2: '', 3: '', 4: '', 5: '', 6: '', 7: '', 8: '', 9: '', 10: '', 11: '', 12: '',
        13: '', 14: '', 15: '', 16: '', 17: '', 18: '', 19: '', 20: '', 21: '', 22: '', 23: '', 24: '', 25: ''
    },
    15: {
        0: '', 1: '', 2: '', 3: '', 4: '', 5: '', 6: '', 7: '', 8: '', 9: '', 10: '', 11: '', 12: '',
        13: '', 14: '', 15: '', 16: '', 17: '', 18: '', 19: '', 20: '', 21: '', 22: '', 23: '', 24: '', 25: ''
    },
    16: {
        0: '', 1: '', 2: '', 3: '', 4: '', 5: '', 6: '', 7: '', 8: '', 9: '', 10: '', 11: '', 12: '',
        13: '', 14: '', 15: '', 16: '', 17: '', 18: '', 19: '', 20: '', 21: '', 22: '', 23: '', 24: '', 25: ''
    },
    17: {
        0: '', 1: '', 2: '', 3: '', 4: '', 5: '', 6: '', 7: '', 8: '', 9: '', 10: '', 11: '', 12: '',
        13: '', 14: '', 15: '', 16: '', 17: '', 18: '', 19: '', 20: '', 21: '', 22: '', 23: '', 24: '', 25: ''
    },
    18: {
        0: '', 1: '', 2: '', 3: '', 4: '', 5: '', 6: '', 7: '', 8: '', 9: '', 10: '', 11: '', 12: '',
        13: '', 14: '', 15: '', 16: '', 17: '', 18: '', 19: '', 20: '', 21: '', 22: '', 23: '', 24: '', 25: ''
    },
    19: {
        0: '', 1: '', 2: '', 3: '', 4: '', 5: '', 6: '', 7: '', 8: '', 9: '', 10: '', 11: '', 12: '',
        13: '', 14: '', 15: '', 16: '', 17: '', 18: '', 19: '', 20: '', 21: '', 22: '', 23: '', 24: '', 25: ''
    },
    20: {
        0: '', 1: '', 2: '', 3: '', 4: '', 5: '', 6: '', 7: '', 8: '', 9: '', 10: '', 11: '', 12: '',
        13: '', 14: '', 15: '', 16: '', 17: '', 18: '', 19: '', 20: '', 21: '', 22: '', 23: '', 24: '', 25: ''
    },
    21: {
        0: '', 1: '', 2: '', 3: '', 4: '', 5: '', 6: '', 7: '', 8: '', 9: '', 10: '', 11: '', 12: '',
        13: '', 14: '', 15: '', 16: '', 17: '', 18: '', 19: '', 20: '', 21: '', 22: '', 23: '', 24: '', 25: ''
    }
}

lista_regras = [[None] * len(tokens_struct) for i in range(len(simbolos))]

for i in range(len(simbolos)):
    for j in range(len(tokens_struct)):
        lista_regras[i][j] = regras_struct[i][j]

empilhar(pilha, '$') #Precisa também incluir o símbolo inicial da gramática

for token_atual in tokens:
    print("Token atual: ", token_atual[1])
    if token_atual != '$':

        for simb in simbolos: #Não entendi porque faz isso aqui...
            empilhar(pilha, simb)

            while topo(pilha) != '$':
                if topo(pilha) in simbolos: # Isso aqui não ficou legal... muitas verificações desnecessárias. 
                                            # Sugiro definir uma codificação em que não precise usar o "in" (ele é um for disfarçado)

                    i = int(simbolos.get(topo(pilha)))
                    j = int(tokens_struct.get(token_atual[1]))

                    regra_atual = lista_regras[i][j]
                    #print("Pilha: ", pilha)
                    pilha.pop()

                    if regra_atual != '':
                        # print("token: ", token_atual)
                        # print("Simbolo: ", simb)
                        # print("i: ", i, "j: ", j)
                        # print("Regra: ", regra_atual)

                        vector_regra_atual = regra_atual.split()

                        for r in reversed(vector_regra_atual):
                            empilhar(pilha, r)    
                        #print("Pilha atualizada: ", pilha)        
                else:
                    if topo(pilha) == token_atual[1]: #A saída é uma árvore, não uma lista de tokens.
                        saida.append(token_atual)
                        #print("Saída: ", token_atual[1])
                        
                    else:
                        print("Erro! Token inválido: ", topo(pilha)) #Veja as regras de tratamento de erros.
                    
                    pilha.pop()
                    #print("Pilha após saída: ", pilha)

    else:
        print("Acabaram os tokens")

print("Saída: ", saida)