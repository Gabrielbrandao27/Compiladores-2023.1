# Um parser que recebe a lista de tokens e tipos e retorna a árvore sintática
pilha = []

def vazia(pilha):
    return pilha == []

def empilhar(pilha, item):
    return pilha.append(item)

def topo(pilha):
    return pilha[-1]

def tamanho(pilha):
    return len(pilha)

def posicao(pilha, item):
    indice = len(pilha) - 1 - pilha[::-1].index(item)
    return indice

def terminal(item):
    if item in tokens_struct:
        return True
    
tokens = [['(', '('], [')', ')'], ['{', '{'], ['}', '}'], [',', ','], ['.', '.'], [';', ';'], 
         ['=', '='], ['==', '=='], ['<', '<'], ['>', '>'], ['<=', '<='], ['>=', '>='], 
         ['!=', '!='], ['+', '+'], ['-', '-'], ['*', '*'], ['/', '/'], ['1234', 'int'], 
         ['12.34', 'float'], ['for', 'for'], ['while', 'while'], ['if', 'if'], 
         ['else', 'else'], ['var1', 'identifier'], ['123', 'number'], '$']

simbolos = {
    "Function" : 0,
    "ArgList" : 1,
    "Arg" : 2,
    "Declaration" : 3,
    "Type" : 4,
    "IdentList" : 5,
    "Stmt" : 6,
    "ForStmt" : 7,
    "OptExpr" : 8,
    "whileStmt" : 9,
    "IfStmt" : 10,
    "ElsePart" : 11,
    "CompoundStmt" : 12,
    "StmtList" : 13,
    "Expr" : 14,
    "Rvalue" : 15,
    "Compare" : 16,
    "Mag" : 17,
    "Term" : 18,
    "Factor" :19
}

tokens_struct = {
    'identifier': 0,
    'number': 1,
    'int': 2,
    'float': 3,
    'if': 4,
    'else': 5,
    'for': 6,
    'while': 7,
    ',': 8,
    '.': 9,
    ';': 10,
    '{': 11,
    '}': 12,
    '(': 13,
    ')': 14,
    '=': 15,
    '==': 16,
    '<': 17,
    '>': 18,
    '<=': 19,
    '>=': 20,
    '!=': 21,
    '-': 22,
    '+': 23,
    '*': 24,
    '/': 25
}

regras_struct = {
    0: {
        0: '', 1: '', 2: '', 3: '', 4: '', 5: '', 6: '', 7: '', 8: '', 9: '', 10: '', 11: '', 12: '',
         13: 'opa', 14: '', 15: '', 16: '', 17: '', 18: '', 19: '', 20: '', 21: '', 22: '', 23: '', 24: '', 25: ''
    },
    1: {
        0: '', 1: '', 2: '', 3: '', 4: '', 5: '', 6: '', 7: '', 8: '', 9: '', 10: '', 11: '', 12: '',
        13: '', 14: '', 15: '', 16: '', 17: '', 18: '', 19: '', 20: '', 21: '', 22: '', 23: '', 24: '', 25: ''
    },
    2: {
        0: '', 1: '', 2: '', 3: '', 4: '', 5: '', 6: '', 7: '', 8: '', 9: '', 10: '', 11: '', 12: '',
        13: '', 14: '', 15: '', 16: '', 17: '', 18: '', 19: '', 20: '', 21: '', 22: '', 23: '', 24: '', 25: ''
    },
    3: {
        0: '', 1: '', 2: '', 3: '', 4: '', 5: '', 6: '', 7: '', 8: '', 9: '', 10: '', 11: '', 12: '',
        13: '', 14: '', 15: '', 16: '', 17: '', 18: '', 19: '', 20: '', 21: '', 22: '', 23: '', 24: '', 25: ''
    },
    4: {
        0: '', 1: '', 2: '', 3: '', 4: '', 5: '', 6: '', 7: '', 8: '', 9: '', 10: '', 11: '', 12: '',
        13: '', 14: '', 15: '', 16: '', 17: '', 18: '', 19: '', 20: '', 21: '', 22: '', 23: '', 24: '', 25: ''
    },
    5: {
        0: '', 1: '', 2: '', 3: '', 4: '', 5: '', 6: '', 7: '', 8: '', 9: '', 10: '', 11: '', 12: '',
        13: '', 14: '', 15: '', 16: '', 17: '', 18: '', 19: '', 20: '', 21: '', 22: '', 23: '', 24: '', 25: ''
    },
    6: {
        0: '', 1: '', 2: '', 3: '', 4: '', 5: '', 6: '', 7: '', 8: '', 9: '', 10: '', 11: '', 12: '',
        13: '', 14: '', 15: '', 16: '', 17: '', 18: '', 19: '', 20: '', 21: '', 22: '', 23: '', 24: '', 25: ''
    },
    7: {
        0: '', 1: '', 2: '', 3: '', 4: '', 5: '', 6: '', 7: '', 8: '', 9: '', 10: '', 11: '', 12: '',
        13: '', 14: '', 15: '', 16: '', 17: '', 18: '', 19: '', 20: '', 21: '', 22: '', 23: '', 24: '', 25: ''
    },
    8: {
        0: '', 1: '', 2: '', 3: '', 4: '', 5: '', 6: '', 7: '', 8: '', 9: '', 10: '', 11: '', 12: '',
        13: '', 14: '', 15: '', 16: '', 17: '', 18: '', 19: '', 20: '', 21: '', 22: '', 23: '', 24: '', 25: ''
    },
    9: {
        0: '', 1: '', 2: '', 3: '', 4: '', 5: '', 6: '', 7: '', 8: '', 9: '', 10: '', 11: '', 12: '',
        13: '', 14: '', 15: '', 16: '', 17: '', 18: '', 19: '', 20: '', 21: '', 22: '', 23: '', 24: '', 25: ''
    },
    10: {
        0: '', 1: '', 2: '', 3: '', 4: '', 5: '', 6: '', 7: '', 8: '', 9: '', 10: '', 11: '', 12: '',
        13: '', 14: '', 15: '', 16: '', 17: '', 18: '', 19: '', 20: '', 21: '', 22: '', 23: '', 24: '', 25: ''
    },
    11: {
        0: '', 1: '', 2: '', 3: '', 4: '', 5: '', 6: '', 7: '', 8: '', 9: '', 10: '', 11: '', 12: '',
        13: '', 14: '', 15: '', 16: '', 17: '', 18: '', 19: '', 20: '', 21: '', 22: '', 23: '', 24: '', 25: ''
    },
    12: {
        0: '', 1: '', 2: '', 3: '', 4: '', 5: '', 6: '', 7: '', 8: '', 9: '', 10: '', 11: '', 12: '',
        13: '', 14: '', 15: '', 16: '', 17: '', 18: '', 19: '', 20: '', 21: '', 22: '', 23: '', 24: '', 25: ''
    },
    13: {
        0: '', 1: '', 2: '', 3: '', 4: '', 5: '', 6: '', 7: '', 8: '', 9: '', 10: '', 11: '', 12: '',
        13: '', 14: '', 15: '', 16: '', 17: '', 18: '', 19: '', 20: '', 21: '', 22: '', 23: '', 24: '', 25: ''
    },
    14: {
        0: '', 1: '', 2: '', 3: '', 4: '', 5: '', 6: '', 7: '', 8: '', 9: '', 10: '', 11: '', 12: '',
        13: '', 14: '', 15: '', 16: '', 17: '', 18: '', 19: '', 20: '', 21: '', 22: '', 23: '', 24: '', 25: ''
    },
    15: {
        0: '', 1: '', 2: '', 3: '', 4: '', 5: '', 6: '', 7: '', 8: '', 9: '', 10: '', 11: '', 12: '',
        13: '', 14: '', 15: '', 16: '', 17: '', 18: '', 19: '', 20: '', 21: '', 22: '', 23: '', 24: '', 25: ''
    },
    16: {
        0: '', 1: '', 2: '', 3: '', 4: '', 5: '', 6: '', 7: '', 8: '', 9: '', 10: '', 11: '', 12: '',
        13: '', 14: '', 15: '', 16: '', 17: '', 18: '', 19: '', 20: '', 21: '', 22: '', 23: '', 24: '', 25: ''
    },
    17: {
        0: '', 1: '', 2: '', 3: '', 4: '', 5: '', 6: '', 7: '', 8: '', 9: '', 10: '', 11: '', 12: '',
        13: '', 14: '', 15: '', 16: '', 17: '', 18: '', 19: '', 20: '', 21: '', 22: '', 23: '', 24: '', 25: ''
    },
    18: {
        0: '', 1: '', 2: '', 3: '', 4: '', 5: '', 6: '', 7: '', 8: '', 9: '', 10: '', 11: '', 12: '',
        13: '', 14: '', 15: '', 16: '', 17: '', 18: '', 19: '', 20: '', 21: '', 22: '', 23: '', 24: '', 25: ''
    },
    19: {
        0: '', 1: '', 2: '', 3: '', 4: '', 5: '', 6: '', 7: '', 8: '', 9: '', 10: '', 11: '', 12: '',
        13: '', 14: '', 15: '', 16: '', 17: '', 18: '', 19: '', 20: '', 21: '', 22: '', 23: '', 24: '', 25: ''
    }
}

lista_regras = [[None] * len(tokens_struct) for i in range(len(simbolos))]

for i in range(len(simbolos)):
    for j in range(len(tokens_struct)):
        lista_regras[i][j] = regras_struct[i][j]

empilhar(pilha, '$')

regra_atual = ''

for token in tokens:

    if token != '$':

        for simb in simbolos:
            empilhar(pilha, simb)

            i = int(simbolos.get(topo(pilha)))
            j = int(tokens_struct.get(token[1]))

            print("i: ", i, "j: ", j)

            regra_atual = lista_regras[i][j]
            pilha.pop()

            print("Regra: ", regra_atual)

            if regra_atual != '':
            
                for r in reversed(regra_atual):
                    empilhar(pilha, r)

                while topo(pilha) != '$':

                    # Compara os elementos da regra A->a com o token e remove 1 a 1 até chegar no $

                    pilha.pop()
            

    else:
        print("Acabaram os tokens")